#include "opencv2/opencv.hpp"
#include <fstream>
#define MIN(a,b) ((a) < (b) ? (a) : (b))

using namespace cv;
using namespace std;
ofstream myfile;




void arounddendrite(Mat imm, vector<RotatedRect> rotRect, ofstream &myfile, int CountLW, int CountMW, int CountHW)
{

	int LWlcount = 0, LWmcount = 0, LWhcount = 0, MWlcount = 0, MWmcount = 0, MWhcount = 0, HWlcount = 0, HWmcount = 0, HWhcount = 0;
	int totLWlcount = 0, totLWmcount = 0, totLWhcount = 0, totMWlcount = 0, totMWmcount = 0, totMWhcount = 0, totHWlcount = 0, totHWmcount = 0, totHWhcount = 0;
	int avgLWlcount = 0, avgLWmcount = 0, avgLWhcount = 0, avgMWlcount = 0, avgMWmcount = 0, avgMWhcount = 0, avgHWlcount = 0, avgHWmcount = 0, avgHWhcount = 0;
	
	Mat thr_high_Synapse;
	cv::inRange(imm, cv::Scalar(0, 0, 110), cv::Scalar(30, 30, 255), thr_high_Synapse);//RED-HIGH INTENSITY
	dilate(thr_high_Synapse, thr_high_Synapse, Mat());
	//imshow("thr_high_Synapse", thr_high_Synapse);

	Mat Medium_Synapse_thr;
	cv::inRange(imm, cv::Scalar(0, 0, 50), cv::Scalar(10, 10, 175), Medium_Synapse_thr);//RED -MED INTENSITY
	dilate(Medium_Synapse_thr, Medium_Synapse_thr, Mat());

	Mat Low_Synapse_thr;
	cv::inRange(imm, cv::Scalar(0, 0, 20), cv::Scalar(10, 10, 38), Low_Synapse_thr);
	Low_Synapse_thr = Low_Synapse_thr - Medium_Synapse_thr - thr_high_Synapse;//RED -LOW INTENSITY
	dilate(Low_Synapse_thr, Low_Synapse_thr, Mat());

	int totlowIntSyn = countNonZero(Low_Synapse_thr);
	int totmedIntSyn = countNonZero(Medium_Synapse_thr);
	int tothigIntSyn = countNonZero(thr_high_Synapse);
	
	
	for (int i = 0; i < rotRect.size(); i++)
	{
		LWlcount = 0, LWmcount = 0, LWhcount = 0, MWlcount = 0, MWmcount = 0, MWhcount = 0, HWlcount = 0, HWmcount = 0, HWhcount = 0;
		Mat Hrotated, Mrotated, Lrotated;
		cv::Mat Hcropped, Mcropped, Lcropped;
		cv::Mat rot_mat = cv::getRotationMatrix2D(rotRect[i].center, rotRect[i].angle, 1);
		if (rotRect[i].angle < -45.)
			std::swap(rotRect[i].size.width, rotRect[i].size.height);


		warpAffine(thr_high_Synapse, Hrotated, rot_mat, thr_high_Synapse.size(), INTER_CUBIC);
		// crop the resulting image
		cv::getRectSubPix(Hrotated, rotRect[i].size, rotRect[i].center, Hcropped);
		
		
		warpAffine(Medium_Synapse_thr, Mrotated, rot_mat, Medium_Synapse_thr.size(), INTER_CUBIC);
		// crop the resulting image
		cv::getRectSubPix(Mrotated, rotRect[i].size, rotRect[i].center, Mcropped);

	
		warpAffine(Medium_Synapse_thr, Lrotated, rot_mat, Low_Synapse_thr.size(), INTER_CUBIC);
		// crop the resulting image
		cv::getRectSubPix(Lrotated, rotRect[i].size, rotRect[i].center, Lcropped);// low int synapse rotated rect (ROI)  image
		
				float wdth = MIN (rotRect[i].size.width, rotRect[i].size.height);
				if (wdth >= 1)
				{
					if (wdth <= 50) //low width dendrite
					{
						LWlcount = countNonZero(Lcropped); // no of low int syn around a Low width dendrite
						LWmcount = countNonZero(Mcropped);// no of med int syn around a Low width dendrite
						LWhcount = countNonZero(Hcropped);// no of high int syn around a Low width dendrite
						//cout << countNonZero(Lcropped) << ", " << countNonZero(Mcropped) << ",  " << countNonZero(Hcropped) << endl;
						totLWlcount += LWlcount; totLWmcount += LWmcount;  totLWhcount += LWhcount;
					}
					else if (wdth > 50 && wdth <= 100)
					{
						MWlcount = countNonZero(Lcropped);
						MWmcount = countNonZero(Mcropped);
						MWhcount = countNonZero(Hcropped);
						totMWlcount += MWlcount; totMWmcount += MWmcount;  totMWhcount += MWhcount;
					}
					else
					{
						HWlcount = countNonZero(Lcropped);
						HWmcount = countNonZero(Mcropped);
						HWhcount = countNonZero(Hcropped);
						totHWlcount += HWlcount; totHWmcount += HWmcount;  totHWhcount += HWhcount;
					}
				}
				
				
				
	}
	if (CountLW == 0) {avgLWlcount = 0; avgLWmcount = 0; avgLWhcount = 0;}
	else { avgLWlcount = totLWlcount / CountLW;  avgLWmcount = totLWmcount / CountLW; avgLWhcount = totLWhcount / CountLW; }
	if (CountMW == 0) { avgMWlcount = 0; avgMWmcount = 0; avgMWhcount = 0; }
	else { avgMWlcount = totMWlcount / CountMW; avgMWmcount = totMWmcount / CountMW; avgMWhcount = totMWhcount / CountMW; }
	if (CountHW == 0) { avgHWlcount = 0; avgHWmcount = 0; avgHWhcount = 0; }
	else { avgHWlcount = totHWlcount / CountHW; avgHWmcount = totHWmcount / CountHW; avgHWhcount = totHWhcount / CountHW; }
	myfile << ","<< "arounddendrite" << "," << "Avg Low Int Syn count arnd. Low width"  << "," << "Avg Med Int Syn count arnd. Low width" << "," << "Avg Low Int Syn count arnd. High width" << "," << "Avg Low Int Syn count arnd. Med width" << "," <<" Avg Med Int Syn count arnd. Med width" << "," << "Avg High Int Syn count arnd. Med width" << "," << "Avg Low Int Syn count arnd. Large width "<< "," << "Avg Med Int Syn count arnd. Large width" << "," << "Avg High Int Syn count arnd. Large width";
	myfile << ","<< "arounddendrite" << "," << avgLWlcount << "," << avgLWmcount << "," << avgLWhcount << "," << avgMWlcount << "," << avgMWmcount << "," << avgMWhcount << "," << avgHWlcount << "," << avgHWmcount << "," << avgHWhcount;
}


void dendritedetect( Mat img, ofstream & myfile,string fstr, int n)
{
	string dendrpath = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Old STEP1\\%s\\den_z%d_3layers_processed.png", fstr.c_str(), n);
	Mat imgtofun = img.clone();
	cout << dendrpath << endl;
	cv::normalize(img, img, 0, 255, cv::NORM_MINMAX, CV_8UC1);
	Mat cloned = img.clone();
	cv::inRange(img, cv::Scalar(0,17, 2), cv::Scalar(60, 255, 150), img);//Green-yellow THRESH
	dilate(img, img, Mat());
	dilate(img, img, Mat());
	dilate(img, img, Mat());
	dilate(img, img, Mat());
	dilate(img, img, Mat());
	dilate(img, img, Mat());
	int Swid = 0, Mwid = 0, Lwid = 0, totSwid = 0, totMwid = 0, totLwid = 0, avgSwid = 0, avgMwid = 0, avgLwid = 0, avgSlen = 0, avgMlen = 0, avgLlen = 0;
	int totSlen = 0, totMlen = 0, totLlen = 0;
	Mat thresh = img.clone(); // original thresholded image of greeen dendrites
	int avgoverallwdth = 0,avgoverallen=0;
	cv::Mat skel(img.size(), CV_8UC1, cv::Scalar(0));
	cv::Mat temp(img.size(), CV_8UC1);
	cv::Mat element = cv::getStructuringElement(cv::MORPH_CROSS, cv::Size(3, 3));
	bool done;
	do
	{
		cv::morphologyEx(img, temp, cv::MORPH_OPEN, element);
		cv::bitwise_not(temp, temp);
		cv::bitwise_and(img, temp, temp);
		//	cout << "img size  " << img.size() << endl << "temp.size  " << temp.size() << endl << " skel size  " << skel.size() << endl;
		cv::bitwise_or(skel, temp, skel);
		cv::erode(img, img, element);

		double max;
		cv::minMaxLoc(img, 0, &max);
		done = (max == 0);
	} while (!done);

	Mat cdst;
	cvtColor(skel, cdst, CV_GRAY2BGR);
	// imwrite("skeleton.png",skel);
	dilate(skel, skel, Mat());
	/** imwrite the image -------------------------------------------------------------------- Display purposes only*/
	vector<vector<Point>> dispcontours; vector<Vec4i> disphierarchy;
	findContours(skel, dispcontours, disphierarchy, CV_RETR_CCOMP, cv::CHAIN_APPROX_SIMPLE);
	for (int i = 0; i < dispcontours.size(); i++)
	{
		if (arcLength(dispcontours[i], false)>250)
			drawContours(cloned, dispcontours, i, Scalar(128, 0, 255), 1, cv::LINE_8, vector<Vec4i>(), 0, Point());
	}
	imwrite(dendrpath, cloned);
	//------------------------------------------------------------------------------------------------------------------------

	vector<vector<Point>> hcontours;
	vector<Vec4i> hhierarchy;
	
	dilate(skel, skel, Mat());

	findContours(skel, hcontours, hhierarchy, CV_RETR_CCOMP, cv::CHAIN_APPROX_SIMPLE);

	vector<RotatedRect> minRect(hcontours.size());
	int wdth = 0, swidth = 0, mwidth = 0, lwidth = 0;
	int slen = 0, mlen = 0, llen = 0;
	

	for (int i = 0; i < hcontours.size(); i++)
	{
			minRect[i] = minAreaRect(Mat(hcontours[i]));
	}

	for (int i = 0; i< hcontours.size(); i++)
	{
		if ((arcLength(hcontours[i], true) >= 250) && (hcontours[i].size() >= 5))
		{
			
			Size2f s = minRect[i].size;
			wdth = MIN(s.width, s.height);
			if (wdth >= 1)
			{
				if (wdth <= 50)
				{
					totSwid += wdth;
					swidth++;
				}
				else if (wdth > 50 && wdth <= 100)
				{
					totMwid += wdth;
					mwidth++;
				}
				else
				{
					totLwid += wdth;
					lwidth++;
				}
			}
			if ((arcLength(hcontours[i], true)) <= 350)
			{
				totSlen += (arcLength(hcontours[i], true));
				slen++;
			}
			else if ((arcLength(hcontours[i], true) >= 350) && (arcLength(hcontours[i], true) <= 600))
			{
				totMlen += (arcLength(hcontours[i], true));
				mlen++;
			}
			else
			{
				totLlen += (arcLength(hcontours[i], true));
				llen++;
			}

		}

		
	}
	


	if (slen == 0) avgSlen = 0;
	else avgSlen = totSlen / slen; 

	if (mlen == 0) avgMlen = 0;
	else avgMlen = totMlen / mlen;

	if (llen == 0) avgLlen = 0; 
	else  avgLlen = totLlen / llen;

	if (swidth == 0) avgSwid = 0;
	else avgSwid = totSwid / swidth; 

	if (mwidth == 0) avgMwid = 0;
	else avgMwid = totMwid / mwidth; 

	if (lwidth == 0) avgLwid = 0;
	else avgLwid = totLwid / lwidth;

	if ((swidth + mwidth + lwidth) == 0) avgoverallwdth = 0; 
	else avgoverallwdth = (totSwid + totMwid + totLwid) / (swidth + mwidth + lwidth);

	if ((slen + mlen + llen) == 0)avgoverallen = 0; 
	else avgoverallen = (totSlen + totMlen + totLlen) / (slen + mlen + llen);


	/*~~~~~~~~~~~~~~*/arounddendrite(imgtofun, minRect, myfile, swidth, mwidth, lwidth);
 myfile << "," << "DENDRITE" << "," << "Total No of Dendrites" << "," << "No.of Small width Dendrites" << "," <<" No.of med width Dendrites" << "," << "No.of large width Dendrites" << "," <<"No.of Small length Dendrites" << "," << "No.of Med length Dendrites" << "," << "No.of Large length Dendrites" << "," << "Avg len of all Dendrites" << "," << "Avg len of small length Dendrites" << "," << "Avg len of med length Dendrites" << "," << "Avg len of large length Dendrites" << "," << "Avg wdth of all Dendrites" << "," << "Avg wdth of small width Dendrites" << "," << "Avg wdth of med width Dendrites" << "," << "Avg wdth of large width Dendrites"<<",";
	myfile << "," << "DENDRITE" << "," << swidth + mwidth + lwidth << "," << swidth << "," << mwidth << "," << lwidth << "," << slen << "," << mlen << "," << llen << "," << avgoverallen << "," << avgSlen << "," << avgMlen << "," << avgLlen << "," << avgoverallwdth << "," << avgSwid << "," << avgMwid << "," << avgLwid<<",";
}

void findsoma(Mat &im, vector<vector<Point>> bcontours, vector<vector<Point>> acontours, ofstream &myfile)
{

	vector<vector<Point>> astrocytes;
	vector<Vec4i> astrocyteshierarchy;
	vector<vector<Point>> neurons;
	vector<Vec4i> neuronsfhierarchy;
	vector<vector<Point>> fcontours;
	vector<Vec4i> fhierarchy;
	vector<vector<Point>> afcontours;
	vector<Vec4i> afhierarchy;
	vector<vector<Point>> bfcontours;
	vector<Vec4i> bfhierarchy;
	vector<vector<Point>> scontours;
	vector<Vec4i> shierarchy;
	int mincs[100];
	vector<vector<Point>> remcontours;
	vector<Moments> mub(bcontours.size());
	vector<Point2f> mcb(bcontours.size());
	int ib = -1;
	int count = 0;
	vector<Point> som;
	vector<Moments> mua(acontours.size());
	vector<Point2f> mca(acontours.size());
	int i1 = -1;
	for (int i = 0; i < acontours.size(); i++) // filter areas off intersection contour
	{
		if (fabs(contourArea(acontours[i])) > 150)
			afcontours.push_back(acontours[i]);
	}
	for (int i = 0; i < bcontours.size(); i++) // filter areas of blue contours
	{
		if (fabs(contourArea(bcontours[i])) > 150)
			bfcontours.push_back(bcontours[i]);
	}

	/// Get the moments of blue contours

	for (int i = 0; i < bfcontours.size(); i++)
		mub[i] = moments(bfcontours[i], false);

	///  Get the mass centers of blue contours:
	for (int i = 0; i < bfcontours.size(); i++)
		mcb[i] = Point2f(mub[i].m10 / mub[i].m00, mub[i].m01 / mub[i].m00);

	/// Get the moments of intersection contours
	for (int i = 0; i < afcontours.size(); i++)
		mua[i] = moments(afcontours[i], false);

	///  Get the mass centers of intersection contours:
	for (int i = 0; i < afcontours.size(); i++)
		mca[i] = Point2f(mua[i].m10 / mua[i].m00, mua[i].m01 / mua[i].m00);

	// check if centroid of any of the intersection contours is near the blue contours: If yes then- we have found a soma
	float d = 0; int j1 = 0; int ifin = -1; int j5 = -1; int jfin = 0;

	for (int i = 0; i < afcontours.size(); i++)
	{
		som.clear();
		float dmin = 1000000; int minc = 0;

		for (int j = 0; j < bfcontours.size(); j++)
		{
			d = sqrt(((mca[i].x - mcb[j].x)*(mca[i].x - mcb[j].x)) + ((mca[i].y - mcb[j].y)*(mca[i].y - mcb[j].y)));

			if (d < dmin)
			{
				dmin = d;
				minc = j;

			}

		}

		fcontours.push_back(bfcontours[minc]);
		mincs[i] = minc;
	}

	for (int g = 0; g < bfcontours.size(); g++)
	{
		int cc = 0;
		for (int h = 0; h < 100; h++)
		{
			if (g == mincs[h])
				cc++;
		}
		if (cc == 0)
			remcontours.push_back(bfcontours[g]);
	}
	int lowcirc = 0, highcirc = 0;// circularity of astrocytes
	int nlowcirc = 0, nhighcirc = 0;
	for (int k = 0; k < remcontours.size(); k++)
	{
		cv::RotatedRect min_area_rect = minAreaRect(cv::Mat(remcontours[k]));
		float aspect_ratio = float(min_area_rect.size.width) / min_area_rect.size.height;
		if (aspect_ratio > 1.0) {
			aspect_ratio = 1.0 / aspect_ratio;
		}
		if (aspect_ratio >= 0.35 && aspect_ratio <= 0.7)
		{
			astrocytes.push_back(remcontours[k]);
			if (aspect_ratio <= 0.55)
				lowcirc++;
			else
				highcirc++;

		}
		else
		{
			neurons.push_back(remcontours[k]);
			if (aspect_ratio <= 0.55)
				nlowcirc++;
			else
				nhighcirc++;
		}
	}

	int siz;
	vector<Point2f>center(fcontours.size());
	vector<float>radius(fcontours.size());
	vector<float> aspect_ratio(fcontours.size());
	vector<float> diameter;
	float sumaspect = 0;
	float meanaspect = 0;
	float stddevaspect = 0;
	float sumdiameter = 0;
	float meandiameter = 0;
	float stddevdiameter = 0;
	siz = fcontours.size();
	for (int k = 0; k < fcontours.size(); k++)
	{
		minEnclosingCircle((Mat)fcontours[k], center[k], radius[k]);
		circle(im, center[k], radius[k], Scalar(20, 230, 125), 6, 8, 0);
		cv::RotatedRect min_area_rect = minAreaRect(cv::Mat(fcontours[k]));
		aspect_ratio[k] = float(min_area_rect.size.width) / min_area_rect.size.height;
		if (aspect_ratio[k] > 1.0)
			aspect_ratio[k] = 1.0 / aspect_ratio[k];

	}
	for (int k = 0; k < fcontours.size(); k++)
	{
		sumaspect += aspect_ratio[k];
		sumdiameter += (2 * radius[k]);
	}

	meanaspect = sumaspect / siz;
	meandiameter = sumdiameter / siz;

	for (int k = 0; k < fcontours.size(); k++)
	{
		stddevaspect = ((meanaspect - aspect_ratio[k])*(meanaspect - aspect_ratio[k])) / siz;
		stddevdiameter = ((meandiameter - (2 * radius[k]))*(meandiameter - (2 * radius[k]))) / siz;
	}
	myfile << "," << "TOTAL" << "," << bfcontours.size();
	myfile << "," << "SOMA" << " ," << fcontours.size() << " ," << meandiameter << " ," << stddevdiameter << ", " << meanaspect << " ," << stddevaspect;
	myfile << "," << "Astrocyte" << " ," << astrocytes.size() << " ," << lowcirc << " ," << highcirc;
	myfile << "," << "Others" << " ," << neurons.size() << " ," << nlowcirc << " ," << nhighcirc;
	for (int j = 0; j < astrocytes.size(); j++)
		drawContours(im, astrocytes, j, Scalar(255, 255, 255), cv::FILLED, cv::LINE_8, vector<Vec4i>(), 0, Point());
	for (int j = 0; j < neurons.size(); j++)
		drawContours(im, neurons, j, Scalar(255, 125, 255), cv::FILLED, cv::LINE_8, vector<Vec4i>(), 0, Point());

}
void areabinning(vector<vector<Point>> contours, string str, ofstream &myfile)
{
	int c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0, c7 = 0, c8 = 0, c9 = 0, c10 = 0, c11 = 0, c12 = 0, c13 = 0, c14 = 0, c15 = 0, c16 = 0, c17 = 0, c18 = 0, c19 = 0, c20 = 0, c21 = 0;
	for (int i = 0; i < contours.size(); i++)
	{
		double area = fabs(contourArea((contours[i])));

		if (area >= 5 && area < 100)
			c1++;
		if (area >= 100 && area < 350)
			c2++;
		if (area >= 350 && area < 500)
			c3++;
		if (area >500)
			c4++;
		
	}
	myfile << " ," << "SYNAPSE" << "," << str << "," << c1 << "," << c2 << "," << c3 << "," << c4 << ",";

}

void synapse(Mat &imm, ofstream &myfile)
{

	vector<vector<Point>> High_synapse_contours;
	vector<Vec4i> thierarchy;
	Mat thr_high_Synapse;
	cv::inRange(imm, cv::Scalar(0, 0, 110), cv::Scalar(30, 30, 255), thr_high_Synapse);//RED-HIGH INTENSITY
	dilate(thr_high_Synapse, thr_high_Synapse, Mat());

	findContours(thr_high_Synapse, High_synapse_contours, thierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE); // Find the contours in the image

	for (int i = 0; i < High_synapse_contours.size(); i++)
		drawContours(imm, High_synapse_contours, i, Scalar(128, 0, 255), cv::FILLED, cv::LINE_8, vector<Vec4i>(), 0, Point());//pink-high
	

	/*~~~~~~~~~~~~*/areabinning(High_synapse_contours, "high intensity", myfile);

	// medium intensity
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy; 
	Mat Medium_Synapse_thr;
	Mat thrdil;
	dilate(thr_high_Synapse, thrdil, Mat());
	cv::inRange(imm, cv::Scalar(0, 0, 50), cv::Scalar(10, 10, 175), Medium_Synapse_thr);//RED -LOW+HIGH INTENSITY
	Medium_Synapse_thr = Medium_Synapse_thr - thrdil;   													// RED (LOW INTENSITY)
	findContours(Medium_Synapse_thr, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE); // Find the contours in the image

	for (int i = 0; i < contours.size(); i++)
	{
		drawContours(imm, contours, i, Scalar(0, 255, 128), cv::FILLED, cv::LINE_8, vector<Vec4i>(), 0, Point());//green-medium
	}

	/*~~~~~~~~~~~~*/areabinning(contours, "medium intensity", myfile);
	


	vector<vector<Point>> contoursm;
	vector<Vec4i> hierarchym; Mat Low_Synapse_thr;

	cv::inRange(imm, cv::Scalar(0, 0, 20), cv::Scalar(10, 10, 38), Low_Synapse_thr);
	Low_Synapse_thr = Low_Synapse_thr - Medium_Synapse_thr - thr_high_Synapse;
	//dilate(thrm, thrm, Mat());
	findContours(Low_Synapse_thr, contoursm, hierarchym, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE); // Find the contours in the image

	for (int i = 0; i < contoursm.size(); i++)
	{
		drawContours(imm, contoursm, i, Scalar(0, 128, 255), cv::FILLED, cv::LINE_8, vector<Vec4i>(), 0, Point());//orange color-low
	}
	//imshow("Synapse_Show", imm);
	/*~~~~~~~~~~~~*/areabinning(contoursm, "low intensity", myfile);
}

int main(int argc, char** argv)
{

	std::string file_contents;
	myfile.open("STEP1i_waste.csv");
	std::ifstream file("oldstep.txt");
	std::string fstr; string name;
	vector<vector<Point>> bcontours;
	vector<Vec4i> bhierarchy;
	vector<vector<Point>> acontours;
	vector<Vec4i> ahierarchy;
	Mat bthr, src_gray, gth; Mat added; Mat intersection;
	using namespace cv;
	vector<vector<Point>> tcontours;
	vector<Vec4i> thierarchy;
	
	// Read image

	while (std::getline(file, fstr))
	{
		// Read image
		for (int n = 1; n <= 40; n++)
		{
			if (n < 10)
				name = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Old STEP1i\\%s\\z%d_3layers_original.tif", fstr.c_str(), n);
			//name = format("C:\\Users\\VIneeta\\Pictures\\STEPi\\%s\\%s_z0%dc1+2+3.jpg", fstr.c_str(), fstr.c_str(), n);
			else
				name = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Old STEP1i\\%s\\z%d_3layers_original.tif", fstr.c_str(), n);
			//name = format("C:\\Users\\VIneeta\\Pictures\\STEPi\\%s\\%s_z%dc1+2+3.jpg", fstr.c_str(), fstr.c_str(), n);

			cout << format("Processsing Folder %s", fstr.c_str()) << endl;
			Mat imm = imread(name);

			if (imm.empty()) //if image is empty- read next line of txt file- move on to the next folder
			{	goto POP; cout << "NOT FOUND:"<< endl;}
			
				

			string result = format("C:\\Users\\VIneeta\\Documents\\Visual Studio 2013\\Projects\\OpenCV-Test\\OpenCV-Test\\Old STEP1\\%s\\z%d_3layers_processed.tif", fstr.c_str(), n);
			string imagnam = format("%s_z%dc1+2+3", fstr.c_str(), n);
			myfile << imagnam;
			cout << format("Processsing Image %s", imagnam.c_str()) << endl;
			Mat imtofn = imm.clone();

			cvtColor(imm, src_gray, CV_BGR2GRAY);
			/*~~~~~~~*/ synapse(imm, myfile);
			/*~~~~~~~*/dendritedetect(imtofn, myfile, fstr,n);

			// thresholding bright green and yellow (soma tails/dendrites)
			cv::threshold(src_gray, src_gray, 50, 255, cv::THRESH_TOZERO);
			bitwise_not(src_gray, src_gray);
			cv::GaussianBlur(src_gray, gth, cv::Size(3, 3), 0, 0);
			cv::threshold(gth, gth, 200, 255, cv::THRESH_BINARY);
			bitwise_not(gth, gth);
			dilate(gth, gth, Mat());

			//thresholding nuclei (blue) in the image
			cv::inRange(imm, cv::Scalar(40, 0, 0), cv::Scalar(255, 55, 68), bthr);//BLUE THRESH
			dilate(bthr, bthr, Mat());
			bitwise_and(gth, bthr, intersection);//intersection of nuclei with dendrite
			//bitwise_xor(intersection, bthr, added);
			findContours(bthr, bcontours, bhierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE); // Find the blue contours in the image
			findContours(intersection, acontours, ahierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE); // Find the contours in the intersection image


			/*~~~~~~~*/ findsoma(imm, bcontours, acontours, myfile);

			//-------------------------------------------------------------------------------------------------------------------------------------------			


			imwrite(result, imm);
			myfile << endl;


		}
	POP:;
	}
	myfile.close();
	waitKey(0);
}
